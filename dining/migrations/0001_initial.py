# Generated by Django 2.1.3 on 2018-12-09 18:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=10)),
                ('sex', models.BooleanField()),
                ('is_paid', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Coins',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False)),
                ('introduced_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                      related_name='coins_requests_introduced',
                                                      to=settings.AUTH_USER_MODEL)),
                ('user',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coins_requests_created',
                                   to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('food_id', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('login_url', models.CharField(max_length=200)),
                ('reserve_table', models.CharField(max_length=200)),
                ('reserve_url', models.CharField(max_length=200)),
                ('csrf_name', models.CharField(max_length=100)),
                ('form_username', models.CharField(max_length=100)),
                ('form_password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserDiningData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dining_username', models.CharField(max_length=25)),
                ('dining_password', models.CharField(max_length=25)),
                ('reserve_sunday_breakfast', models.BooleanField(default=False)),
                ('reserve_monday_breakfast', models.BooleanField(default=False)),
                ('reserve_tuesday_breakfast', models.BooleanField(default=False)),
                ('reserve_wednesday_breakfast', models.BooleanField(default=False)),
                ('reserve_thursday_breakfast', models.BooleanField(default=False)),
                ('reserve_friday_breakfast', models.BooleanField(default=False)),
                ('reserve_saturday_breakfast', models.BooleanField(default=False)),
                ('reserve_sunday_lunch', models.BooleanField(default=False)),
                ('reserve_monday_lunch', models.BooleanField(default=False)),
                ('reserve_tuesday_lunch', models.BooleanField(default=False)),
                ('reserve_wednesday_lunch', models.BooleanField(default=False)),
                ('reserve_thursday_lunch', models.BooleanField(default=False)),
                ('reserve_friday_lunch', models.BooleanField(default=False)),
                ('reserve_saturday_lunch', models.BooleanField(default=False)),
                ('reserve_sunday_dinner', models.BooleanField(default=False)),
                ('reserve_monday_dinner', models.BooleanField(default=False)),
                ('reserve_tuesday_dinner', models.BooleanField(default=False)),
                ('reserve_wednesday_dinner', models.BooleanField(default=False)),
                ('reserve_thursday_dinner', models.BooleanField(default=False)),
                ('reserve_friday_dinner', models.BooleanField(default=False)),
                ('reserve_saturday_dinner', models.BooleanField(default=False)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dining.University')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferableFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.SmallIntegerField(default=0)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dining.Food')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserServicesUniversities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('served_breakfast_self_id', models.CharField(max_length=10)),
                ('served_breakfast_self_name', models.CharField(max_length=100)),
                ('served_lunch_self_id', models.CharField(max_length=10)),
                ('served_lunch_self_name', models.CharField(max_length=100)),
                ('served_dinner_self_id', models.CharField(max_length=10)),
                ('served_dinner_self_name', models.CharField(max_length=100)),
                ('university', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dining.University')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='food',
            name='university',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dining.University'),
        ),
    ]
